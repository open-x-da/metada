name: Linux-GNU

on:
  push:
    branches: [ master ]
    paths:
      - '.github/workflows/linux.yaml'
      - 'cmake/**'
      - 'src/**'
      - 'tests/**'
      - 'CMakeLists.txt'

  pull_request:
    branches: [ master ]
    paths:
      - '.github/workflows/linux.yaml'
      - 'cmake/**'
      - 'src/**'
      - 'tests/**'
      - 'CMakeLists.txt'

jobs:
  build:
    name: Build & Test with GCC 14 (${{ matrix.build_type }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build_type: [Debug, Release]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          python3-dev \
          python3-numpy \
          python3-pip \
          libgtest-dev \
          libgmock-dev \
          clang-format \
          lcov \
          libyaml-cpp-dev \
          nlohmann-json3-dev \
          libnetcdf-dev \
          libnetcdf-c++4-dev \
          libeigen3-dev \
          libopenmpi-dev \
          libhdf5-dev \
          libcurl4-openssl-dev \
          libnetcdff-dev

    - name: Install fprettify
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install fprettify 

    - name: Install GCC 14.2.0
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update
        sudo apt-get install -y gcc-14 g++-14 gfortran-14

    - name: Install xtl and xtensor
      run: |
        git clone https://github.com/xtensor-stack/xtl.git
        mkdir xtl/build
        cd xtl/build
        cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/local
        cmake --build .
        sudo ninja install
        cd ../..
        git clone https://github.com/xtensor-stack/xtensor.git
        mkdir xtensor/build
        cd xtensor/build
        cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/local
        cmake --build .
        sudo ninja install

    - name: Install nanoflann
      run: |
        git clone https://github.com/jlblancoc/nanoflann.git
        cd nanoflann
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local
        make -j$(nproc)
        sudo make install

    - name: Install ng-log
      run: |
        git clone --depth 1 --branch v0.8.0 https://github.com/ng-log/ng-log.git
        cd ng-log
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local
        make -j$(nproc)
        sudo make install

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=gcc-14 \
          -DCMAKE_CXX_COMPILER=g++-14 \
          -DCMAKE_Fortran_COMPILER=gfortran-14 \
          ..

    - name: Build
      run: |
        cd build
        cmake --build . --verbose

    - name: Test
      run: |
        cd build
        ctest --output-on-failure

    # Coverage tests temporarily disabled
    # - name: Generate coverage report
    #   run: |
    #     cd build
    #     cmake --build . --target coverage
        
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     directory: ./build/coverage
    #     flags: linux
    #     name: linux-coverage
    #     fail_ci_if_error: true 